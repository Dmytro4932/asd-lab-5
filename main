#include <iostream>
#include <vector>
#include <queue>
#include <Windows.h>

using namespace std;

// Функція для обходу графу в ширину
void BFS(vector<vector<int>>& graph, int start) {
    int n = graph.size();
    vector<bool> visited(n + 1, false); // Використовуємо n+1 для індексації вершин з 1 по n
    queue<int> q;

    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        cout << current << " ";

        for (int i = 1; i <= n; ++i) {
            if (graph[current - 1][i - 1] == 1 && !visited[i]) { // Скориговано індекси
                visited[i] = true;
                q.push(i);
            }
        }
    }
    cout << endl;
}

// Функція для обходу графу в глибину
void DFSUtil(vector<vector<int>>& graph, int v, vector<bool>& visited) {
    visited[v] = true;
    cout << v << " ";
    for (int i = 0; i < graph.size(); ++i) {
        if (graph[v - 1][i] == 1 && !visited[i + 1]) {
            DFSUtil(graph, i + 1, visited);
        }
    }
}

void DFS(vector<vector<int>>& graph, int start) {
    int n = graph.size();
    vector<bool> visited(n + 1, false); // Використовуємо n+1 для індексації вершин з 1 по n
    DFSUtil(graph, start, visited);
    cout << endl;
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    // Граф представлений матрицею суміжності (варіант 2)
    vector<vector<int>> graph = {
        {0, 1, 1, 1, 0},
        {1, 0, 1, 0, 1},
        {1, 1, 0, 1, 1},
        {1, 0, 1, 0, 0},
        {0, 1, 1, 0, 0}0
    };

    cout << "Обхід в ширину: ";
    BFS(graph, 1);

    cout << "Обхід в глибину: ";
    DFS(graph, 1);

    return 0;
}
